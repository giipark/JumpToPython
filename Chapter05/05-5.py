print("abs")
print(abs(3))
print(abs(-3))
print(abs(-1.2))
print("=" * 50)
# ================================================================================================
print("all")
print(all([1, 2, 3, 4, 5]))
print(all([1, 2, 3, 0, 0]))
print(all([]))
print(all({}))
print(all({"name": 'True', "": 'False', 0: 'False'}))
print("=" * 50)
# ================================================================================================
print("any")
print(any([1, 2, 3, 0]))
print(any([0, ""]))
print(any([]))
print("=" * 50)
# ================================================================================================
print("chr")
print(chr(97))
print(chr(65))
print(chr(44032))
print(chr(44088))
print("=" * 50)
# ================================================================================================
print("dir")
print(dir([1, 2, 3]))
print(dir({'1': 'a'}))
print("=" * 50)
# ================================================================================================
print("divmod")  # (몫, 나머지)
print(divmod(7, 3))  # (2, 1)
print(divmod(10, 5))  # (2, 0)
print("=" * 50)
# ================================================================================================
print("enumerate")
for i, name in enumerate(['head', 'tail', 'body']):
    print(i, name)
print("=" * 50)
# ================================================================================================
print("eval")
print(eval("1+2"))
print(eval("'Hello' + 'World'"))
print(eval('divmod(4, 3)'))
print(eval)
"""
1️⃣ eval()의 globals와 locals을 제한하기
safe_globals = {"__builtins__": {}}  # ✅ 위험한 기능 차단
safe_locals = {}

user_input = "2 + 2"
print(eval(user_input, safe_globals, safe_locals))  # ✅ 4 (안전한 계산)
================================================================================================
2️⃣ ast.literal_eval()을 사용하여 보안 강화 (추천 ✅)
import ast

user_input = "[1, 2, 3]"  # ✅ 안전한 데이터
safe_result = ast.literal_eval(user_input)

print(safe_result)  # ✅ [1, 2, 3] (안전한 실행)
"""
print("=" * 50)
# ================================================================================================
print("filter")


def positive(x):
    return x > 0


print(list(filter(positive, [1, -3, 2, 0, -5, 6])))
print(list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6])))
print("=" * 50)
# ================================================================================================
print("hex")
print(hex(234))
print(hex(10))
print(hex(3))
print("=" * 50)
# ================================================================================================
print("id")
a = 3
print(id(a))
print(id(3))
b = a
print(id(b))
print(id(4))
print("=" * 50)
# ================================================================================================
print("input")
a = input("Enter: ")
print(a)
print("=" * 50)
# ================================================================================================
print("int")
print(int('3'))
# print(int('3.4'))     - 오류발생: ValueError: invalid literal for int() with base 10: '3.4'
print(int(3.4))
print(int('1111', 2))  # 2진수인 '1111'의 10진수로 변환
print("=" * 50)
# ================================================================================================
print("isinstance")  # agr1: 해당 객체, args2: 객체가 그 클래스의 인스턴스인지


class Person: pass


a = Person()
print(isinstance(a, Person))  # True
b = 3
print(isinstance(b, Person))  # False
print("=" * 50)
# ================================================================================================
print("len")
print(len('python'))
print(len([1, 2, 3]))
print("=" * 50)
# ================================================================================================
print("list")
print(list("python"))
print(list([1, 2, 3]))
print("=" * 50)
# ================================================================================================
print("map")


def two_times(x):
    return x * 2


print(list(map(two_times, [1, 2, 3, 4])))
print(list(map(lambda x: x * 2, [1, 2, 3, 4])))
print("=" * 50)
# ================================================================================================
print("max")
print(max([1, 2, 3]))
print(max("python"))
print("=" * 50)
# ================================================================================================
print("min")
print(min([1, 2, 3]))
print(min("python"))
print("=" * 50)
# ================================================================================================
print("oct")
print(oct(34))
print(oct(12345))
print("=" * 50)
# ================================================================================================
print("open")
with open("Family.py", 'rb') as f:
    print(f.read())
print("=" * 50)
# ================================================================================================
print("ord")
print(ord('a'))
print(ord('A'))
print(ord('0'))
print(ord('박'))
print("=" * 50)
# ================================================================================================
print("pow")
print(pow(2, 4))
print(pow(3, 3))
print(pow(2, 10))
print(pow(11, 3))
print("=" * 50)
# ================================================================================================
print("range")  # range([start,] stop [,step])
print(list(range(5)))
print(list(range(5, 10)))
print(list(range(1, 10, 2)))
print("=" * 50)
# ================================================================================================
print("round")  # round(number [,ndigits])
print(round(4.6))
print(round(4.2))
print("=" * 50)
# ================================================================================================
print("sorted")
print(sorted([3, 1, 2]))
print(sorted(['a', 'c', 'f', 'g', 'e', 'b', 'd']))
print(sorted("zero"))
print(sorted((3, 2, 1)))
print("=" * 50)
# ================================================================================================
print("sort")
print([3, 1, 2].sort())  # None - 리스트 객체 그 자체를 정렬만 할 뿐, 정렬된 결과를 리턴하지는 않음
a = [3, 1, 2]
a.sort()
print(a)
print("=" * 50)
# ================================================================================================
print("str")
print(str(3))
print(str('hello'))
print(str(0x10))
print("=" * 50)
# ================================================================================================
print("sum")
print(sum([1, 2, 3]))
print(sum([4, 5, 6]))
print("=" * 50)
# ================================================================================================
print("tuple")
print(tuple('abc'))
print(tuple([1, 2, 3]))
print(tuple((1, 2, 3)))
print("=" * 50)
# ================================================================================================
print("type")
print(type('abc'))
print(type([]))
print(type({}))
print(type(()))
print(type(3))
print(type(7.2))
print(type(open("test", 'w')))
print("=" * 50)
# ================================================================================================
print("zip")  # zip(*iterable)은 동일한 개수로 이루어진 데이터들을 묶어서 리턴하는 함수
print(list(zip([1, 2, 3], [4, 5, 6])))
print(list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9])))
print(list(zip([1, 2, 3], [4, 5, 6], [7, 8])))  # 묶은 데이터 집합의 개수가 맞지 않으면 해당 부분은 출력하지 않음
print(list(zip("abc", "def")))
